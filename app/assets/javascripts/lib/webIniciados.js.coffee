window.webIniciados = do ->
	
	s3 = null
	bucketName = 'iniciados-dev'
	
	refreshCognitoToken = (callback) ->
		try
			console.log 'inside'
			$.get '/users/get_cognito_token.json', (data) ->
				params = 
					IdentityPoolId: data.identity_pool_id
					IdentityId: data.aws_credentials.identity_id
					Logins: 'cognito-identity.amazonaws.com': data.aws_credentials.token
				AWS.config.region = 'us-west-2'
				AWS.config.credentials = new (AWS.CognitoIdentityCredentials)(params)
				AWS.config.credentials.get ->
					awsCredentials = 
						accessKeyId: AWS.config.credentials.accessKeyId
						secretAccessKey: AWS.config.credentials.secretAccessKey
						sessionToken: AWS.config.credentials.sessionToken
						accessKeyId: AWS.config.credentials.accessKeyId
						expireTime: AWS.config.credentials.expireTime
						
					localStorage.awsCredentials = JSON.stringify(awsCredentials)
					
					publicContent.s3 = new AWS.S3
						params: {Bucket: bucketName}
						
					callback() if typeof callback == 'function'
		catch e
			console.log e
	
	checkCredentials = (callback) ->
		if typeof localStorage.awsCredentials is 'undefined'
			refreshCognitoToken(callback)
		else
			awsCredentials = JSON.parse localStorage.awsCredentials
			if (new Date()).valueOf() + 60000 * 5 >= (new Date(awsCredentials.expireTime)).valueOf()
				refreshCognitoToken(callback)
			else
				AWS.config.region = 'us-west-2'
				AWS.config.credentials = new AWS.Credentials awsCredentials
				publicContent.s3 = new AWS.S3
					params: {Bucket: bucketName}
				callback() if typeof callback == 'function'
	
	updateCredentials = ->
		if typeof localStorage.awsCredentials is not 'undefined' and localStorage.awsCredentials is not null
			awsCredentials = JSON.parse localStorage.awsCredentials
			if (new Date()).valueOf() + 60000 * 5 >= (new Date(awsCredentials.expireTime)).valueOf()
				window.checkCredentials()
	
	encode = (data) ->
			b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
			o1 = undefined
			o2 = undefined
			o3 = undefined
			h1 = undefined
			h2 = undefined
			h3 = undefined
			h4 = undefined
			bits = undefined
			i = 0
			ac = 0
			tmp_arr = []
			if !data
				return data
			loop
				# pack three octets into four hexets
				o1 = data.charCodeAt(i++)
				o2 = data.charCodeAt(i++)
				o3 = data.charCodeAt(i++)
				bits = o1 << 16 | o2 << 8 | o3
				h1 = bits >> 18 & 0x3f
				h2 = bits >> 12 & 0x3f
				h3 = bits >> 6 & 0x3f
				h4 = bits & 0x3f
				# use hexets to index into b64, and append result to encoded string
				tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4)
				unless i < data.length
					break
			enc = tmp_arr.join('')
			r = data.length % 3
			(if r then enc.slice(0, r - 3) else enc) + '==='.slice(r or 3)
		 
	decode = (data) ->
			b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
			o1 = undefined
			o2 = undefined
			o3 = undefined
			h1 = undefined
			h2 = undefined
			h3 = undefined
			h4 = undefined
			bits = undefined
			i = 0
			ac = 0
			tmp_arr = []
			if !data
				return data
			data += ''
			loop
				# unpack four hexets into three octets using index points in b64
				h1 = b64.indexOf(data.charAt(i++))
				h2 = b64.indexOf(data.charAt(i++))
				h3 = b64.indexOf(data.charAt(i++))
				h4 = b64.indexOf(data.charAt(i++))
				bits = h1 << 18 | h2 << 12 | h3 << 6 | h4
				o1 = bits >> 16 & 0xff
				o2 = bits >> 8 & 0xff
				o3 = bits & 0xff
				if h3 == 64
					tmp_arr[ac++] = String.fromCharCode(o1)
				else if h4 == 64
					tmp_arr[ac++] = String.fromCharCode(o1, o2)
				else
					tmp_arr[ac++] = String.fromCharCode(o1, o2, o3)
				unless i < data.length
					break
			tmp_arr.join ''
		
		# ---
		# generated by js2coffee 2.2.0
	
	publicContent =
		checkCredentials: checkCredentials
		updateCredentials: updateCredentials
		decode: decode
		s3: null
		
	return	publicContent

